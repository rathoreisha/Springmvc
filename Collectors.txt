Collectors In Streams
----------------------
-> Collectors operations are used to collect the collections from Streams.

-> We are having below methods to perform Collectors operations

			Collectors.toList()
			Collectors.toSet()
			Collectors.toMap()
			Collectors.toCollection() etc..


Example 1: toList() Method.


package filterOperations;

public class Person {

	private String name;

	private int age;

	private String designation;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + ", designation=" + designation + "]";
	}
	
	
}



package collectorOperations;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CollectorDemo {

	public static void printEmployeeObjcet(List<Person> list) {

		System.out.println("IN PrintEMployee Method");
		for (Person l : list) {
			System.out.println(l);
		}

	}

	public static void main(String[] args) {

		Person p1 = new Person();
		p1.setName("Santosh");
		p1.setAge(22);
		p1.setDesignation("Software Engineer");

		Person p2 = new Person();
		p2.setName("Ganesh");
		p2.setAge(25);
		p2.setDesignation("Software Engineer");

		Person p3 = new Person();
		p3.setName("vikas");
		p3.setAge(26);
		p3.setDesignation("SoftwareEngineer");

		Person p4 = new Person();
		p4.setName("pavan");
		p4.setAge(79);
		p4.setDesignation("SoftwareEngineer");

		Person p5 = new Person();
		p5.setName("balaji");
		p5.setAge(67);
		p5.setDesignation("SoftwareEngineer");

		ArrayList<Person> al = new ArrayList();

		al.add(p1);
		al.add(p2);
		al.add(p3);
		al.add(p4);
		al.add(p5);

		System.out.println(al);

		Stream<Person> stream = al.stream();

		Stream<Person> filter = stream.filter((p) -> p.getAge() >= 28);
 
				
		List<Person> list = filter.collect(Collectors.toList());
		
		
		
		printEmployeeObjcet(list);
		
		
	
	}
}


Example 2: toSetMethod()


package filterOperations;

public class Person {

	private String name;

	private int age;

	private String designation;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + ", designation=" + designation + "]";
	}
	
	
}



package collectorOperations;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CollectorDemo {

	public static void printEmployeeObjcet(Set<Person> list) {

		System.out.println("IN PrintEMployee Method");
		for (Person l : list) {
			System.out.println(l);
		}

	}

	public static void main(String[] args) {

		Person p1 = new Person();
		p1.setName("Santosh");
		p1.setAge(22);
		p1.setDesignation("Software Engineer");

		Person p2 = new Person();
		p2.setName("Ganesh");
		p2.setAge(25);
		p2.setDesignation("Software Engineer");

		Person p3 = new Person();
		p3.setName("vikas");
		p3.setAge(26);
		p3.setDesignation("SoftwareEngineer");

		Person p4 = new Person();
		p4.setName("pavan");
		p4.setAge(79);
		p4.setDesignation("SoftwareEngineer");

		Person p5 = new Person();
		p5.setName("balaji");
		p5.setAge(67);
		p5.setDesignation("SoftwareEngineer");

		ArrayList<Person> al = new ArrayList();

		al.add(p1);
		al.add(p2);
		al.add(p3);
		al.add(p4);
		al.add(p5);

		System.out.println(al);

		Stream<Person> stream = al.stream();

		Stream<Person> filter = stream.filter((p) -> p.getAge() >= 28);
 
				
		Set<Person> list = filter.collect(Collectors.toSet());
		
		
		
		printEmployeeObjcet(list);
			
		
	}
}

